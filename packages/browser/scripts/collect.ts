import fs from "node:fs";
import { fileURLToPath } from "node:url";

import { autoclosing } from "@globals/tools";
import path from "pathe";
import { type BrowserType, chromium, firefox, webkit } from "playwright";

async function detectGlobals(browserType: BrowserType): Promise<string[]> {
    await using browser = autoclosing(await browserType.launch());

    const page = await browser.newPage();
    await page.goto("about:blank");
    const globals = await page.evaluate("Object.keys(Object.getOwnPropertyDescriptors(globalThis))");

    if (!Array.isArray(globals)) {
        throw new TypeError("failed to retrieve globals");
    }

    return globals as string[];
}

async function main() {
    const browsers = [chromium, firefox, webkit];
    const globals = await Promise.all(browsers.map(detectGlobals));
    const uniqueGlobals = [...new Set(globals.flat())];

    console.log(`collected ${uniqueGlobals.length} globals`);

    const dirname = path.dirname(fileURLToPath(import.meta.url));
    // eslint-disable-next-line security/detect-non-literal-fs-filename
    fs.writeFileSync(
        path.resolve(dirname, "../src/globals.ts"),
        [
            "// This file is auto-generated by running `pnpm run collect`",
            "// DO NOT EDIT THIS FILE MANUALLY",
            "",
            "export const browserGlobals = [",
            ...uniqueGlobals.map((global) => `    "${global}",`),
            "] as const;",
            "",
            "export type BrowserGlobalKey = typeof browserGlobals[number];",
            "",
        ].join("\n"),
    );

    console.log("wrote to src/globals.ts");
}

main();
